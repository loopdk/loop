<?php

/**
 * @file
 * Loop search db.
 */

/**
 * Implements hook_menu().
 */
function loop_search_db_menu() {
  $items['loop_search_db_nodes'] = array(
    'title' => 'List nodes in JSON format',
    'page callback' => 'loop_search_db_nodes',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['loop_search_db/%/%'] = array(
    'title' => 'Search nodes in JSON format',
    'page callback' => 'loop_search_db_callback',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Perform a search using search API.
 *
 * Output results in JSON format.
 *
 * @param string $content_type
 *   The content type to search on.
 * @param string $terms
 *   The search terms to use for the query.
 *
 * @throws \SearchApiException
 */
function loop_search_db_callback($content_type, $terms) {
  // Create a query against the default Loop search index.
  $query = search_api_query('db_post');

  // Filter by content type.
  $query_filter = $query->createFilter();
  $query_filter->condition('type', $content_type);
  $query->filter($query_filter);

  // Add the search terms to the query.
  $query->keys($terms);

  // Execute the query.
  $query_result = $query->execute();

  $data = array();

  // Build an array of results from the query results.
  foreach ($query_result['results'] as $result) {
    $node = $result['entity'];
    $data[] = array(
      // For better search, use strtolower.
      'value' => strtolower(trim(trim($node->title), '"')),
      // Fine human output.
      'title' => trim($node->title),
      // Use internal path.
      'link' => '/' . drupal_get_path_alias('node/' . $node->nid),
      // For dupDetector.
      'id' => $node->nid,
    );
  }

  // Return as JSON.
  drupal_json_output($data);
}

/**
 * Return every node of type post in JSON format.
 *
 * Outputs JSON object.
 */
function loop_search_db_nodes() {
  // Select nodes.
  $nodes = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1)
    ->condition('type', 'post')
    ->execute();

  // Build nodes.
  $data = array();
  foreach ($nodes as $node) {
    $data[] = array(
      // For better search, use strtolower.
      'value' => strtolower(trim(trim($node->title), '"')),
      // Fine human output.
      'title' => trim($node->title),
      // Use internal path.
      'link' => '/' . drupal_get_path_alias('node/' . $node->nid),
      // For dupDetector.
      'id' => $node->nid,
    );
  }

  // Return as JSON.
  drupal_json_output($data);
}

/**
 * Implements hook_init().
 *
 * Include search JS for every page load.
 */
function loop_search_db_init() {
  global $user;

  // Check if it's a registered user.
  if ($user->uid > 0) {
    if (function_exists('loopdk_load_handlebars')) {
      loopdk_load_handlebars();
    }
    drupal_add_js(drupal_get_path('module', 'loop_search_db') . '/js/typeahead.bundle.js');
    drupal_add_js(drupal_get_path('module', 'loop_search_db') . '/js/loop_search_db.js', array(
      'scoop' => 'header',
      'weight' => 1000,
    ));
    drupal_add_js(drupal_get_path('module', 'loop_search_db') . '/js/search.js');
    drupal_add_js(drupal_get_path('module', 'loop_search_db') . '/js/placeholders.js');
  }
}

/**
 * Implements hook_theme().
 */
function loop_search_db_theme() {
  return array(
    'loop_search_db_form' => array(
      'render element' => 'form',
      'template' => 'loop-search-db--form',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter search form for Twitter Typeahead.
 */
function loop_search_db_form_search_api_page_search_form_alter(&$form) {
  // Fetch search page id.
  $default_page_id = db_query("SELECT id FROM {search_api_page} WHERE index_id = 'loop_search_db_index'")->fetchField();

  $form['#attributes']['class'] = 'js--search';

  // Add class to submit.
  $form['submit_' . $default_page_id]['#attributes']['class'][] = 'typeahead-block--button';

  // Inline styling needed for Twitter Typeahead.
  $form['keys_' . $default_page_id]['#attributes']['style'] = "position: relative; vertical-align: top; background-color: transparent;";

  // Default placeholder.
  $form['form']['keys_' . $default_page_id]['#attributes']['placeholder'] = t('E.g. "How do you document a subject"');

  // Yet again, some id and classes for Twitter Typehead.
  $form['keys_' . $default_page_id]['#attributes']['id'][] = 'typeahead';
  $form['keys_' . $default_page_id]['#attributes']['class'][] = 'typeahead';
  $form['keys_' . $default_page_id]['#attributes']['class'][] = 'tt-query';

  // Figure out if we need a default value.
  $arg = arg();
  if ($arg[0] == "node" && is_numeric($arg[1])) {
    // Load correct node.
    $node = node_load($arg[1]);
    if ($node->type == 'post') {
      // Load entity wrapper.
      $wrapper = entity_metadata_wrapper('node', $node);

      // Get description field.
      $description = $wrapper->field_description->value();

      // Verify its a string.
      if (is_string($description)) {
        // Change default value.
        $form['keys_' . $default_page_id]['#default_value'] = $description;
      }
    }
  }

  // Perform a search to get facets.
  $page = search_api_page_load($default_page_id);
  // Make sure that we actually get results.
  $empty_behavior = $page->options['empty_behavior'];
  $page->options['empty_behavior'] = 'results';
  require_once drupal_get_path('module', 'search_api_page').'/search_api_page.pages.inc';
  $result = search_api_page_search_execute($page);
  $page->options['empty_behavior'] = $empty_behavior;

  if (isset($result['search_api_facets'])) {
    $facets = $result['search_api_facets'];
    if (isset($facets['type'])) {
      $form['#facets']['type'] = $facets['type'];
    }
    if (isset($facets['field_subject:name'])) {
      $form['#facets']['field_subject:name'] = $facets['field_subject:name'];
    }
  }
  $form['#theme'] = ['loop_search_db_form'];
}

function loop_search_db_get_active_filters($facet) {
  $query = drupal_get_query_parameters();
  $filters = isset($query['f']) && is_array($query['f']) ? $query['f'] : [];
  return array_filter($filters, function ($filter) use ($facet) {
    return 0 === strpos(urldecode($filter), $facet.':');
  });
}

function loop_search_db_facet_link($text, $facet, $value = null, $options = []) {
  $path = current_path();
  $options += [
    'query' => loop_search_db_get_facet_query($facet, $value),
  ];
  if (loop_search_db_facet_is_active($facet, $value)) {
    $options['attributes']['class'][] = 'is-active';
  }

  return l($text, $path, $options);
}

function loop_search_db_facet_is_active($facet, $value = null) {
  $query = drupal_get_query_parameters();
  $filters = isset($query['f']) && is_array($query['f']) ? $query['f'] : [];

  $stuff = array_filter($filters, function ($filter) use ($facet, $value) {
    return 0 === strpos($filter, $facet.':'.$value);
  });

  return null === $value ? 0 === count($stuff) : count($stuff) > 0;
}

function loop_search_db_get_facet_query($facet, $value = null) {
  $query = drupal_get_query_parameters();
  $filters = isset($query['f']) && is_array($query['f']) ? $query['f'] : [];
  $done = false;
  foreach ($filters as $key => $filter) {
    if (0 === strpos($filter, $facet.':')) {
      if (null === $value) {
        unset($filters[$key]);
      }
      else {
        $filters[$key] = $facet.':'.$value;
      }
      $done = true;
      break;
    }
  }
  if (!$done) {
    $filters[] = $facet.':'.$value;
  }
  $query['f'] = $filters;

  return $query;
}
