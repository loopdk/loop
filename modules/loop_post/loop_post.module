<?php
/**
 * @file
 * Code for the Loop Post feature.
 */

include_once 'loop_post.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Sets the profession field to the same as the current user.
 * Figure out if profession is linked to a subject, set it as default.
 */
function loop_post_form_node_form_alter(&$form, &$form_state) {
  if ($form['type']['#value'] == 'post') {
    global $user;
    $field_description_language = $form['field_description']['#language'];
    $form['field_description'][$field_description_language]['0']['#format'] = 'simple';

    // We need the field_profession field, so lets fire up user_load!
    $account = user_load($user->uid);

    // Fetch profession field from user.
    $fetched_field_profession = field_get_items('user', $account, 'field_profession');

    // Set up profession field.
    if ($fetched_field_profession) {
      if (arg(1) == 'add') {
        $form['field_profession'][LANGUAGE_NONE]['#default_value'] = array(0 => $fetched_field_profession['0']['tid']);
      }
    }

    // Add js chosen class to profession field. (Chosen jquery added in theme).
    $field_profession_lang = $form['field_profession']['#language'];
    $form['field_profession'][$field_profession_lang]['#attributes']['class'][] = 'js-chosen-select-profession';

    // Move description inside wrapper.
    unset($form['field_description']['#attributes']['class']);
    $form['field_description']['und']['#prefix'] = '<div id="field-description-add-more-wrapper" class="description-form-element form-item">';

    // Set page title.
    drupal_set_title(t("Create question"));
  }

  // Reset form when user goes back in history.
  // @see https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion.
  $form['#attributes']['autocomplete'] = 'off';
}

/**
 * Implements hook_form_alter().
 *
 * @see https://drupal.stackexchange.com/questions/22240/prevent-multiple-form-submissions-server-side#comment20957_22240
 */
function loop_post_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'loop_post_form_validate';
}

/**
 * Implements hook_form_validate().
 *
 * Check that form has not already been submitted. Report error if form has
 * already been submitted.
 */
function loop_post_form_validate(&$form, &$form_state) {
  if (form_get_errors()) {
    return;
  }

  $session_key = 'loop_post_form_validate_submitted';
  if (!isset($_SESSION[$session_key])) {
    $_SESSION[$session_key] = array();
  }

  // "form_build_id" is a unique id for each form being built.
  $form_build_id = $form_state['values']['form_build_id'];
  if (isset($_SESSION[$session_key][$form_build_id]) && $_SESSION[$session_key][$form_build_id] === TRUE) {
    global $user;
    watchdog('loop_post', 'Form !id already submitted (user: !user)', array('!id' => $form['#id'], '!user' => $user->name), WATCHDOG_INFO);
    form_set_error('name]', t('This form has already been submitted. <a href="!url">OK</a>', array('!url' => current_path())));
  }
  else{
    $_SESSION[$session_key][$form_build_id] = TRUE;
  }
}
